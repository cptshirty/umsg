#include "umsg_classes.h"
#include <umsg.h>


umsg_msg_metadata_t msg_structured = {.name = "structured"};



umsg_sub_handle_t umsg_structured_subscribe_logger(uint32_t prescaler, uint8_t length){
    return umsg_subscribe(&msg_structured, prescaler, sizeof(umsg_MessageToTransfer), length, 0);
}

umsg_sub_handle_t umsg_structured_subscribe_transmitter(uint32_t prescaler, uint8_t length){
    return umsg_subscribe(&msg_structured, prescaler, sizeof(umsg_MessageToTransfer), length, 1);
}

uint8_t umsg_receive_structured(umsg_sub_handle_t queue ,umsg_MessageToTransfer * data, uint32_t timeout){
    return umsg_receive(queue, data, timeout);
}


void umsg_publish_structured_to_log(umsg_MessageToTransfer * data){
    umsg_publish(&msg_structured, data, 0);
}

void umsg_publish_structured_to_transmit(umsg_MessageToTransfer * data){
    umsg_publish(&msg_structured, data, 1);
}


void umsg_broadcast_structured(umsg_MessageToTransfer *msg){

    switch(msg->s.msg_class){
    {% for topic_dict in topic_dict_list%}
        case UMSG_{{topic_dict.name.upper()}}:
        {
            switch(msg->s.msg_type){
            {% for msg_dict in topic_dict.msgs %}
            {% set prefix = topic_dict.name+'_'+msg_dict.name%}
            {%if msg_dict.receive == 1 %}
            case {{topic_dict.name.upper()}}_{{msg_dict.name.upper()}}:
            {
                umsg_{{prefix}}_t data = *msg->s.{{topic_dict.name}}.{{msg_dict.name}};
                umsg_{{prefix}}_publish(&data);
            }
            break;
            {%endif%}
            {% endfor%}
            default:
            break;
            
            }
        break;
        }
    {% endfor%}


    
    
    default:
        break;
    }



}
